% -*- mode: noweb; noweb-default-code-mode: R-mode; -*-
%\VignetteIndexEntry{Primer}
%\VignetteKeywords{Preprocessing, Affymetrix, RNA-Sequencing}
%\VignetteDepends{Biobase, oligo, Biostrings}
%\VignettePackage{SCAN.UPC}
\documentclass[12pt]{article}
\usepackage{hyperref}
\usepackage[authoryear, round]{natbib}
\usepackage[utf8]{inputenc}
\usepackage{graphicx}

\textwidth=6.2in
\textheight=8.5in
\parskip=.3cm
\oddsidemargin=.1in
\evensidemargin=.1in
\headheight=-.3in

\newcommand\Rpackage[1]{{\textsf{#1}\index{#1 (package)}}}
\newcommand\dataset[1]{{\textit{#1}\index{#1 (data set)}}}
\newcommand\Rclass[1]{{\textit{#1}\index{#1 (class)}}}
\newcommand\Rfunction[1]{{{\small\texttt{#1}}\index{#1 (function)}}}
\newcommand\Rfunarg[1]{{\small\texttt{#1}}}
\newcommand\Robject[1]{{\small\texttt{#1}}}

\hypersetup{
    colorlinks=false,
    pdfborder={0 0 0},
}

\author{Stephen R. Piccolo}
\begin{document}
\title{Introduction to the SCAN.UPC Package}
\maketitle
\tableofcontents

<<setup, echo=FALSE>>=
## do work in temporary directory
pwd <- setwd(tempdir())
@ 

\section{Background}

This vignette describes how to normalize samples with the \textit{Single-Channel Array Normalization} (SCAN) and \textit{Universal Probability of expression Codes} (UPC) methods. The motivations and methodology behind these approaches have been described in detail in recent papers \citep{piccolo:genomics}. Briefly, SCAN and UPC are quantitative approaches for normalizing mRNA expression data. SCAN is designed to produce expression estimates for one-color and two-color microarrays. UPC produces ``probability of expression'' values to indicate the probability that a given gene (or transcript or exon) is ``actively'' expressed in a given sample. UPCs can be generated for microarrays or RNA-Seq data. Because UPCs can be interpreted consistently, irrespective of the technology/platform used for profiling, UPCs are suitable for integrating expression data across multiple platforms.

A distinguishing feature of the SCAN and UPC methods is that they are applied to \textit{individual} samples. This means that the output for a given sample will be the same whether that sample is processed in isolation or jointly with other samples. This feature also has computational advantages: when a large batch of samples needs to be processed, it is not necessary to store data for the entire batch in the computer's memory at a given time.

SCAN and UPC correct for technological and experimental biases that can arise during expression profiling. For example, microarray probes with high G/C content tend to be biased toward higher overall expression. In RNA-Seq experiments, the G/C content, size of genomic regions being profiled, and read depth can also lead to biases. The SCAN and UPC algorithms correct for such factors and standardize variances across the probes/regions being quantified. A two-component mixture model is also used to estimate which probes/regions constitute background noise versus those that constitute biological signal.

\section{How to produce expression estimates for Affymetrix microarrays}

SCAN can be applied to any Affymetrix microarray for which an annotation package (that has been constructed using the \Rpackage{pdInfoBuilder} package) exists in Bioconductor. This section demonstrates how to normalize an Affymetrix microarray file. In the examples below, a CEL file is downloaded from Gene Expression Omnibus, saved to a temporary file, and then normalized using SCAN. Various optional parameters are also demonstrated.

The first step is to download a CEL file via the GEOquery package.

<<>>=
tmpDir = tempdir()
library(GEOquery)
getGEOSuppFiles("GSM555237", makeDirectory=FALSE, baseDir=tmpDir)
celFilePath = file.path(tmpDir, "GSM555237.CEL.gz")
@

Then the \Rfunction{SCAN} function must be invoked. This function requires one mandatory parameter: a path specifying the location of the file to be normalized.

<<>>=
library(SCAN.UPC)
normalized = SCAN(celFilePath)
@

The \Rfunction{SCAN} function returns an \Rclass{ExpressionSet} object containing a row for each probeset (transcript/gene) value. Detailed status information, including the number of iterations required for mathematical convergence of the mixture models, are printed to the console.

Multiple input files can also be specified using wildcard characters (e.g., ``*.CEL''). In this case, the \Rfunction{SCAN} function returns an \Rclass{ExpressionSet} object with a row for each probeset and a column for each input file.

Using the optional \Rfunarg{outFilePath} parameter, the normalized values also can be saved to a text file. The example below demonstrates this option. (The optional \Rfunarg{verbose} parameter can also be used. When set to FALSE, \Rfunction{SCAN} outputs only minimal status information while processing.)

<<>>=
normalized = SCAN(celFilePath, outFilePath="output_file.txt")
@

By default, \Rfunction{SCAN} uses the default mappings between probes and genes that have been provided by the manufacturer. However, these mappings may be outdated or may include problematic probes (for example, those that cross hybridize). The default mappings also may produce multiple summary values per gene. Alternative mappings, such as those provided by the BrainArray resource (see \url{http://brainarray.mbni.med.umich.edu/Brainarray/Database/CustomCDF/genomic_curated_CDF.asp}), allow \Rfunction{SCAN} to produce a single value per gene and to use updated gene definitions. Users can specify alternative mappings using the \Rfunarg{probeSummaryPackage} parameter. If specified, this package must conform to the standards of the \Rpackage{AnnotationDbi} package. The BrainArray packages can be downloaded from \url{http://brainarray.mbni.med.umich.edu/Brainarray/Database/CustomCDF/CDF_download.asp}. When using BrainArray, be sure to download the R source package for probe-level mappings (example below).

\includegraphics[width=6 in]{BrainArray.png}

Once such a probe-summary has been downloaded, it must be installed in R using code such as the following.

<<download-brainarray, eval=FALSE>>=
download.file("http://brainarray.mbni.med.umich.edu/Brainarray/Database/CustomCDF/ 15.0.0/entrezg.download/hgu95ahsentrezgprobe_15.0.0.tar.gz", "hgu95ahsentrezgprobe_15.0.0.tar.gz")
install.packages("hgu95ahsentrezgprobe_15.0.0.tar.gz", repos=NULL, type="source")
library(hgu95ahsentrezgprobe)
@

Then the mappings can be applied to a CEL file using code such as the following.

<<scan-brainarray, eval=FALSE>>=
normalized = SCAN(celFilePath, probeSummaryPackage=hgu95ahsentrezgprobe)
@

For the microarray-based normalization functions, samples can be downloaded directly from GEO and then normalized in a single step. To do this, substitute the file pattern with the GEO identifier (e.g., ``GSE22309'' or ``GSM555237'').

<<scan-geo, eval=FALSE>>=
normalized = SCAN("GSM555237")
@

Finally, we clean up files that were created in this demo.

<<>>=
unlink(c(celFilePath, "output_file.txt", "hgu95ahsentrezgprobe_15.0.0.tar.gz"))
@

<<cleanup, echo=FALSE>>=
setwd(pwd)
@ 

\section{How to produce expression estimates for Agilent two-color microarrays}

This package also currently supports the ability to normalize Agilent two-color microarrays. The general concept is similar as to Affymetrix arrays; however, SCAN also corrects for biases that can arise due to the dyes used in each channel as well as inter-channel correlation. (This package does not yet support normalizing Agilent one-color arrays.)

To normalize Agilent two-color arrays, use the \Rfunction{SCAN_TwoColor} function. In the example below, an example file is downloaded from GEO and saved to a temporary local file. It is then normalized and save output to an file.

<<scan-twocolor-main, eval=FALSE>>=
tmpDir = tempdir()
getGEOSuppFiles("GSM1072833", makeDirectory=FALSE, baseDir=tmpDir)
inFilePath = file.path(tmpDir, "GSM1072833.CEL.gz")

SCAN_TwoColor(inFilePath, "output_file.txt")
@

Because \Rfunction{SCAN_TwoColor} can also download files directly from GEO, the above process can also be repeated in a single line of code.

<<scan-twocolor-geo, eval=FALSE>>=
SCAN_TwoColor("GSM1072833", "output_file.txt")
@

\section{How to produce probabilistic estimates of expression for microarrays or RNA-Seq}

The SCAN algorithm uses a two-component mixture model to distinguish expression levels that constitute background noise from those that represent biological signal. This model can be used to derive ``probability of expression'' values\citep{Parmigiani2002} that estimate whether a given gene is transcriptionally active (i.e., belongs to the mixture component representing biological signal). These Universal Probability of expression Codes (UPCs) are probabilistic values that range between zero and one: a high value suggests a high probability that a given gene is active in the sample, whereas a low value indicates the opposite. This methodology can be applied to Affymetrix microarrays, Agilent two-color microarrays, and RNA-Seq read counts.

The \Rpackage{SCAN.UPC} package contains a series of functions that can be used to derive UPCs. These functions have similar parameters to their SCAN counterparts. As shown in the examples below, the \Rfunction{UPC} function produces UPC values for Affymetrix microarrays, and the \Rfunction{UPC_TwoColor} function can be applied to Agilent data.

<<upc-microarray, eval=FALSE>>=
upc1 = UPC("GSM555237")

upc2 = UPC_TwoColor("GSM1072833")
@

UPC values also can be derived for RNA-Seq read counts using the \Rfunction{UPC_RNASeq} function. These read counts could be generated via the commonly used Tophat short-read aligner (\url{http://tophat.cbcb.umd.edu/}) followed by application of the htseq-count tool (\url{http://www-huber.embl.de/users/anders/HTSeq/}); however, alternative tools could also be used. 

The \Rfunction{UPC_RNASeq} function requires an input file that specifies a read count for each genomic region (e.g., gene).This file should list a unique identifier for each region in the first column and corresponding read counts (not RPKM/FPKM values) in the second column.

\begin{tabular}{lll}
AAB & 4486 \\
AAC & 10 \\
AAD & 0 \\
AAE & 88223 \\
\end{tabular}

\Rfunction{UPC_RNASeq} can correct for the GC content and length of each genomic region. Users who wish to enable this correction must provide a separate annotation file. This tab-separated file should contain a row for each genomic region. The first column should contain a unique identifier that corresponds to identifiers from the read-count input file. The second column should indicate the length of the genomic region. And the third column should specify the number of G or C bases in the region.

\begin{tabular}{lll}
AAB & 1767 & 640 \\
AAC & 654 & 333 \\
AAD & 4644 & 2039 \\
AAE & 2629 & 1011 \\
\end{tabular}

<<upc-rnaseq, eval=FALSE>>=
upc3 = UPC_RNASeq("ReadCounts.txt", "Annotation.txt")
@

Please see the SCAN.UPC documentation for full descriptions of these functions and the various options they support.

\bibliographystyle{plainnat}
\bibliography{SCAN.vignette}

\end{document}
